=========== Introduction to the DOM =============
* The Document Object Model (DOM) is the data representation of the objects that comprise the structure and content of a document on the web.
* The Document Object Model (DOM) is a programming interface for web documents.
* The Document Object Model (DOM) connects web pages to scripts or programming languages by representing the structure of a documentâ€”such as the ****HTML representing a web pageâ€”in memory. ****
* It represents the page so that programs can change the document structure, style, and content. 
* The DOM represents the document as ~~**nodes**~~ and **objects;** that way, programming languages can interact with the page.

================================================================================================================================================


1. What is the DOM?
* DOM stands for Document Object Model.
* Itâ€™s a programming interface for HTML and XML documents.
* The DOM represents the page structure as a tree of objects * so JavaScript can access, change, add, or delete elements.

Think of it as:
ðŸ“° HTML Page â†’ ðŸ“œ DOM Tree â†’ ðŸ›  Manipulated with JavaScript.

2. How It Works
1. Browser reads your HTML file.
2. It creates a tree structure (the DOM tree).
3. Every tag becomes a node (object) in the tree:
    Document â†’ HTML â†’ Head/Body â†’ Elements â†’ Text/Attributes.
4. JavaScript can then use the DOM API to interact with these nodes in real time.

5. Any changes you make through the DOM instantly appear on the page without refreshing.


3. Features of the DOM
* Platform & language independent (can be used with JavaScript, Python, etc.).
* Tree-like structure (easy to navigate).
* Live view: changes in DOM reflect immediately in the page.
* Event-driven: DOM can respond to user actions (clicks, typing, scrolling).
* Accessible: You can get, set, or remove elements and attributes.

4. Types of Nodes in the DOM
The DOM has different node types:
1. Document Node â†’ The root (document object).
2. Element Node â†’ HTML tags (<p>, <div>, <ul>).
3. Attribute Node â†’ Element attributes (id, class, src).
4. Text Node â†’ Text inside elements.
5. Comment Node â†’ HTML comments (<!-- comment -->).

5. Accessing Elements in the DOM
JavaScript provides several methods to find (select) elements:

Method	                                Description	                            Example
getElementById()	                    Selects by ID	                        document.getElementById("myId")
getElementsByClassName()	            Selects all with a class	            document.getElementsByClassName("myClass")
getElementsByTagName()	                Selects by tag	                        document.getElementsByTagName("p")
querySelector()	                        Selects first match (CSS selector)	    document.querySelector(".myClass")
querySelectorAll()	                    Selects all matches (CSS selector)	    document.querySelectorAll("p.myClass")


6. Modifying Elements in the DOM
You can change:

1. Content:

document.getElementById("title").innerText = "New Title";
document.getElementById("title").innerHTML = "<em>New Title</em>";

2. Attributes:
document.querySelector("img").src = "newImage.jpg";
document.querySelector("a").setAttribute("href", "https://example.com");

3. Styles:
document.querySelector("p").style.color = "red";

4. Classes:
element.classList.add("highlight");
element.classList.remove("hidden");

5. Create / Remove Elements:
let newEl = document.createElement("li");
newEl.innerText = "New Item";
document.querySelector("ul").appendChild(newEl);

document.querySelector("ul").removeChild(newEl);


The Document Object Model (DOM) is basically the bridge between our web page and JavaScript â€” it lets us read, change, add, or remove anything on a web page while itâ€™s running in the browser.

1. Access and Read Page Content
We can use the DOM to get elements and their content.

let title = document.getElementById("mainTitle").textContent;
console.log(title); // Reads the text inside #mainTitle


2. Change Content or Structure Dynamically
We can update text, images, styles, or even the page layout without reloading.

document.getElementById("mainTitle").textContent = "Welcome to My Page!";


3. Add or Remove Elements
We can create new HTML elements or delete existing ones.

let newItem = document.createElement("li");
newItem.textContent = "New List Item";
document.querySelector("ul").appendChild(newItem);


4. Respond to User Actions (Event Handling)
The DOM lets JavaScript listen to clicks, typing, scrolling, etc.

document.getElementById("btn").addEventListener("click", function() {
  alert("Button Clicked!");
});


5. Make Web Pages Interactive
Used for animations, form validation, image sliders, dropdown menus, games, etc.

Example: show/hide content, change colors when hovering, etc.

********The DOM is what makes a static HTML page come alive.
Itâ€™s the programming interface that lets JavaScript interact with HTML and CSS to create dynamic, interactive, user-friendly websites.********